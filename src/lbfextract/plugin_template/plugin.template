import logging
import pathlib
from typing import Any
from typing import List
from typing import Optional

import click
import matplotlib
import pandas as pd
from lbfextract.utils_classes import Signal

import lbfextract.fextract
from lbfextract.core import App
from lbfextract.fextract.schemas import Config, AppExtraConfig, ReadFetcherConfig, SingleSignalTransformerConfig, \
    SignalSummarizer

logger = logging.getLogger(__name__)

class FextractHooks:

    @lbfextract.hookimpl
    def fetch_reads(self,
                    path_to_bam: pathlib.Path,
                    path_to_bed: pathlib.Path,
                    config: Any,
                    extra_config: Any) -> pd.DataFrame:
        """
        :param path_to_bam: path to the bam file
        :param path_to_bed: path to the bed file with the regions to be filtered
        :param config: configuration file containing the configuration object required by the fetch_reads function
        :param extra_config: extra configuration that may be used in the hook implementation
        :return: ReadsPerIntervalContainer object containing all the ReadsPerInterval objects in all the intervals
                 contained in the bed file
        """
        return None

    @lbfextract.hookimpl
    def save_fatched_reads(self, reads_per_interval_container: pd.DataFrame,
                           config: Any,
                           extra_config: Any
                           ) -> None:
        """
        Hook implementing the strategy to save the reads fetched from the intervals
        :param reads_per_interval_container: ReadsPerIntervalContainer containing information about the genomic region
            and the reads mapping to it
        :param output_path: path to the location where the data should be stored
        :param id: run id
        :param time_stamp: time stamp
        :param extra_config: extra configuration that may be used in the hook implementation

        :return: None
        """
        return None

    @lbfextract.hookimpl
    def load_fetched_reads(self, config: Any, extra_config: AppExtraConfig) -> pd.DataFrame:
        """
        :param config: config specific to the function
        :param extra_config: extra configuration that may be used in the hook implementation
        """
        return None

    @lbfextract.hookimpl
    def transform_reads(self, reads_per_interval_container: pd.DataFrame, config: Any,
                        extra_config: Any) -> pd.DataFrame:
        """
        :param reads_per_interval_container: ReadsPerIntervalContainer containing a list of ReadsPerInterval which are
            basically lists with information about start and end of the interval
        :param config: config specific to the function
        :param extra_config: extra configuration that may be used in the hook implementation
        """
        return None

    @lbfextract.hookimpl
    def transform_single_intervals(self, transformed_reads: pd.DataFrame, config: Any,
                                   extra_config: Any) -> Signal:
        """
        :param transformed_reads: ReadsPerIntervalContainer containing a list of ReadsPerInterval which are
            basically lists with information about start and end of the interval
        :param config: config specific to the function
        :param extra_config: config containing context information plus extra parameters
        """
        return None

    @lbfextract.hookimpl
    def transform_all_intervals(self, single_intervals_transformed_reads: Signal, config: Any,
                                extra_config: Any) -> Signal:
        """
        :param single_intervals_transformed_reads: Signal object containing the signals per interval
        :param config: config specific to the function
        :param extra_config: extra configuration that may be used in the hook implementation
        """
        return None

    @lbfextract.hookimpl
    def plot_signal(self, signal: Signal, config: Any, extra_config: Any) -> matplotlib.figure.Figure:
        """
        :param signal: Signal object containing the signals per interval
        :param extra_config: extra configuration that may be used in the hook implementation
        """
        return None

    @lbfextract.hookimpl
    def save_signal(self,
                    signal: Signal,
                    config: Any,
                    extra_config: Any) -> None:
        """
        :param signal: Signal object containing the signals per interval
        :param extra_config: extra configuration that may be used in the hook implementation
        """

        return None


class CliHook:
    @lbfextract.hookimpl_cli
    def get_command(self) -> click.Command | List[click.Command]:

        @click.command()
        @click.option('--path_to_bam', type=click.Path(exists=False,
                                                       file_okay=True,
                                                       dir_okay=True,
                                                       writable=False,
                                                       readable=True,
                                                       resolve_path=False,
                                                       allow_dash=True,
                                                       path_type=pathlib.Path,
                                                       executable=False),
                      help='path to the bam file to be used')
        @click.option('--path_to_bed', type=click.Path(exists=False,
                                                       file_okay=True,
                                                       dir_okay=True,
                                                       writable=False,
                                                       readable=True,
                                                       resolve_path=False,
                                                       allow_dash=True,
                                                       path_type=pathlib.Path,
                                                       executable=False),
                      help='path to the bed file to be used')
        @click.option('--output_path', type=click.Path(exists=False,
                                                       file_okay=False,
                                                       dir_okay=True,
                                                       writable=True,
                                                       readable=True,
                                                       resolve_path=False,
                                                       allow_dash=True,
                                                       path_type=pathlib.Path,
                                                       executable=False),
                      help='path to the output directory')
        @click.option("--skip_read_fetching", is_flag=True, show_default=True,
                      help='Boolean flag. When it is set, the fetching of the reads is skipped and the latest'
                           'timestamp of this run (identified by the id) is retrieved')
        @click.option("--exp_id", default=None, type=str, show_default=True,
                      help="run id")
        @click.option("--window", default=1000, type=int, show_default=True,
                      help="Integer describing the number of bases to be extracted around the middle point of an"
                           " interval present in the bedfile")
        @click.option("--flanking_window", default=1000, type=int, show_default=True,
                      help="Integer describing the number of bases to be extracted after the window")
        @click.option("--extra_bases", default=2000, type=int, show_default=True,
                      help="Integer describing the number of bases to be extracted from the bamfile when removing the "
                           "unused bases to be sure to get all the proper paires, which may be mapping up to 2000 bs")
        @click.option("--n_binding_sites", default=1000, type=int, show_default=True,
                      help="number of intervals to be used to extract the signal, if it is higher then the provided"
                           "intervals, all the intervals will be used")
        @click.option("--summarization_method", default="mean",
                      type=click.Choice(["mean", "median", "max", "min", "skip"]),
                      show_default=True,
                      help=f"method to be used to summarize the signal: {{ mean, median, max, min }}")
        @click.option("--cores", default=1, type=int, show_default=True,
                      help="number of cores to be used")
        @click.option("--flip_based_on_strand", is_flag=True,
                      show_default=True,
                      default=False,
                      help="flip the signal based on the strand")
        @click.option('--gc_correction_tag', type=str,
                      default=None, help='tag to be used to extract gc coefficient per read from a bam file')

        # Here you can add the options you want to be available in the command line (they should match the ones in the
        # function)
        def {{ name_of_the_cli_command }}(
             path_to_bam: pathlib.Path, path_to_bed: pathlib.Path,
             output_path: pathlib.Path,
             skip_read_fetching,
             window: int,
             flanking_window: int,
             extra_bases: int,
             n_binding_sites: int,
             summarization_method: str,
             cores: int,
             exp_id: Optional[str],
             flip_based_on_strand: bool,
             gc_correction_tag: Optional[str]
            ):
            """
            here yuo can add the code that will be executed when the command is called.
            You can use the following code to customize the hooks
            each hook receives a dictionary of configuration parameters
            if the hook is implemented in the plugin, the parameters should be added in the correct hook.
            Here you can find the parameters of the default hook (extract_coverage). These can be modified
            depending on which hook you are using.
            Hook specified above will be used in place of the default one. The first hook with a non None return value
            will be used. Therfore the order of the plugins specified in the plugins_name list is important.
            If you are inheriting from multiple signals, be sure to pass the correct parameters to the correct hooks.
            Generally, parameters to be pass to hooks are shown in the schemas.py file of each plugin.
            If you define a new hook for best practice you could inherit from lbfextract.fextract.schemas and specify
            the voluptuous schema for the parameters of the hook.
            """
            read_fetcher_config = {
                "window": window,
                "flanking_region_window": flanking_window,
                "extra_bases": extra_bases,
                "n_binding_sites": n_binding_sites
            }
            reads_transformer_config = {}
            single_signal_transformer_config = {
                "signal_transformer": "coverage",
                "flip_based_on_strand": flip_based_on_strand,
                "gc_correction": True if gc_correction_tag else False,
                "tag": gc_correction_tag

            }
            transform_all_intervals_config = {
                "summarization_method": summarization_method
            }
            plot_signal_config = {}
            save_signal_config = {}
            extra_config = {
                "cores": cores
            }
            output_path.mkdir(parents=True, exist_ok=True)
            output_path_interval_spec = output_path / f"{path_to_bam.stem}" / f"{path_to_bed.stem}"
            output_path_interval_spec.mkdir(parents=True, exist_ok=True)
            res = App(plugins_name=["{{ name_of_the_signal }}", ],
                      path_to_bam=path_to_bam,
                      path_to_bed=path_to_bed,
                      output_path=output_path_interval_spec or pathlib.Path.cwd(),
                      skip_read_fetching=skip_read_fetching,
                      read_fetcher_config=ReadFetcherConfig(read_fetcher_config),
                      reads_transformer_config=Config(reads_transformer_config),
                      single_signal_transformer_config=SingleSignalTransformerConfig(single_signal_transformer_config),
                      transform_all_intervals_config=SignalSummarizer(transform_all_intervals_config),
                      plot_signal_config=Config(plot_signal_config),
                      save_signal_config=Config(save_signal_config),
                      extra_config=AppExtraConfig(extra_config),
                      id=exp_id).run()
            return res

        return {{ name_of_the_cli_command }}

hook = FextractHooks()
hook_cli = CliHook()
